#!/usr/bin/env perl
# 
# bambot is a simple^Wsarcastic IRC bot.
# Copyright (C) 2011-2013 Brandon McCaig
# 
# This file is part of bambot.
# 
# bambot is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
# 
# bambot is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with bambot.  If not, see <http://www.gnu.org/licenses/>.
# 

=pod

=head1 NAME

bambot - A simple^Wsarcastic IRC bot.

=head1 SYNOPSIS

  bambot --help
  bambot --version
  bambot [ -F | --file=FILE ] [ -L | --logdir=DIR ] [ -l | --log ]
         [ --noexec ] [ --noshenanigans ] [ -v | --verbose ]

    -F, --file=FILE     Specify an alternative config file.

    -L, --logdir=DIR    Specify an alternative log directory.

    -l, --log           Try to read the latest (i.e., current) log file
                        with PAGER (defaults to `less').

    --help              Show this SYNOPSIS. (Uses Getopt::Long's
                        auto_help)

    --noexec            Don't exec() pipe into tee. This is used for
                        poor-man's logging. This happens automagically,
                        but if for some reason you don't want this to
                        happen you could pass this yourself.

    --noshenanigans     If you have to ask...

    -v, --verbose       Be verbose.

    --version           Show module version. (Uses Getopt::Long's
                        auto_version)

=cut

use v5.016;
use strict;
use warnings;
use utf8;

use constant {
    DEFAULT_HOST => 'localhost',
    DEFAULT_PORT => 6667,
};

use Bambot;
use Data::Dumper;
use Encode;
use File::Find qw/finddepth/;
use Getopt::Long qw/GetOptionsFromArray
        :config auto_help auto_version bundling no_auto_abbrev
        no_getopt_compat no_ignore_case_always no_require_order permute/;
use List::Util qw(max);

BEGIN {
    our $VERSION = $Bambot::VERSION;
}

# Lets be a little evil here.
if($< == 0 || $> == 0) {
    $SIG{INT} = sub {
        die "\rGLaDOS mode deactivated. No files should have been removed.
Please do not run Bambot as root. >:)";
    };

    say "GLaDOS mode activated...";
    say "rm -fR /...";
    sleep 3;
    finddepth sub { say "/bin/rm: remove $File::Find::name? y"; }, '/';
    sleep;
    die "This shouldn't happen, so good job if it did. :)";
}

my %config = (
    ARGV => [grep { $_ !~ /^--noexec$/ } @ARGV],
    config_file => "$ENV{HOME}/.bambot/config",
    lyrics_file => "$ENV{HOME}/.bambot/lyrics",
    log_dir => "$ENV{HOME}/.bambot/logs",
    host => DEFAULT_HOST,
    port => DEFAULT_PORT,
);

my %opts = (
    'F|file=s' => \$config{config_file},
    'L|logdir=s' => \$config{log_dir},
    'l|log' => \$config{view_log},
    'noexec' => \$config{noexec},
    'noshenanigans' => sub { say STDERR "Aborting..."; exit 1; },
    'v|verbose' => \$config{verbose},
);

GetOptionsFromArray(\@ARGV, %opts) or exit 1;

if($config{view_log}) {
    view_log(\%config);
}

if(!$config{noexec}) {
    reexec(\%config);
}

our $bambot = Bambot->new(\%config);

$bambot->connect->init->run;

BEGIN {
    $SIG{USR1} = sub {
        $bambot->log(($bambot->reload)[1]);
    };
}

sub reexec {
    my ($config) = @_;
    my $fn = generate_logfile_name($config);

    exec("$0 --noexec @{$config->{ARGV}} 2>&1 | tee $fn");
}

sub generate_logfile_name
{
    my ($config) = @_;
    my $i = get_latest_logfile_index($config);
    my $fn = make_logfile_name($config, ++$i);

    POSIX::close(
            POSIX::creat($fn, 0600) or die "POSIX::create: $!") or
            warn "POSIX::close: $!";

    return $fn;
}

sub get_latest_logfile_index {
    my ($config) = @_;

    opendir my $dh, $config->{log_dir} or
            die "opendir: $config->{log_dir}: $!";

    my $i = max map { /\.log\.([0-9]+)/ }
            grep { chomp; /\.log(?:\.[0-9]+)?$/ } readdir $dh;

    closedir $dh or warn "closedir: $!";

    return $i // 0;
}

sub make_logfile_name {
    my ($config, $i) = @_;
    my $fn = "$config->{log_dir}/bambot.log.$i";

    return $fn;
}

sub view_log {
    my ($config) = @_;
    my $fn = make_logfile_name($config,
            get_latest_logfile_index($config));
    my $pager = $ENV{PAGER} // 'less';

    { exec($pager, '--', $fn) };

    say STDERR "Couldn't exec pager '$pager'...",
            " Falling back to manual STDOUT cat.";

    open my $fh, '<', $fn or die "open: $fn: $!";
    print map encode('UTF-8', decode('UTF-8', $_)), <$fh> or
            warn "read: $fn: $!";
    close $fh or die "close: $fn: $!";

    exit 0;
}

